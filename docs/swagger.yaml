basePath: /api
definitions:
  dto.BookName:
    properties:
      book_name:
        type: string
    type: object
  dto.BookRented:
    properties:
      book:
        type: string
      totalPrice:
        type: number
      users:
        items:
          type: string
        type: array
    type: object
  dto.UserRented:
    properties:
      book:
        type: string
      user:
        type: string
    type: object
  models.JWT:
    properties:
      token:
        type: string
    type: object
  models.Login:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.User:
    properties:
      email:
        type: string
      id:
        type: integer
      lastName:
        type: string
      name:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  models.UserModelIn:
    properties:
      email:
        type: string
      last_name:
        type: string
      name:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  models.UserUpdate:
    properties:
      last_name:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
host: 127.0.0.1:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /rents:
    get:
      consumes:
      - application/json
      description: get rents
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.BookRented'
            type: array
        "500":
          description: Internal Server Error
      summary: List Rents
      tags:
      - rents
    post:
      consumes:
      - application/json
      description: auth required
      parameters:
      - description: create rent
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.BookName'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserRented'
        "400":
          description: Bad Request
      summary: renting book
      tags:
      - rents
  /users:
    get:
      consumes:
      - application/json
      description: get users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "500":
          description: Internal Server Error
      summary: List users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: create User
      parameters:
      - description: create user
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.UserModelIn'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
      summary: create user
      tags:
      - users
  /users/{username}:
    get:
      consumes:
      - application/json
      description: Update User
      parameters:
      - description: username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
      summary: Update user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update User
      parameters:
      - description: update users name, last_name and password
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdate'
      - description: username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
      summary: Update user
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: Log in
      parameters:
      - description: login
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.JWT'
        "400":
          description: Bad Request
      summary: Get JWT
      tags:
      - users
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
